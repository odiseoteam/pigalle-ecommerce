<?php

namespace Proxies\__CG__\Sylius\Bundle\CoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class InventoryUnit extends \Sylius\Bundle\CoreBundle\Entity\InventoryUnit implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getOrder()
    {
        $this->__load();
        return parent::getOrder();
    }

    public function setOrder(\Sylius\Bundle\CoreBundle\Model\OrderInterface $order = NULL)
    {
        $this->__load();
        return parent::setOrder($order);
    }

    public function getShipment()
    {
        $this->__load();
        return parent::getShipment();
    }

    public function setShipment(\Sylius\Bundle\ShippingBundle\Model\ShipmentInterface $shipment = NULL)
    {
        $this->__load();
        return parent::setShipment($shipment);
    }

    public function getShippable()
    {
        $this->__load();
        return parent::getShippable();
    }

    public function setShippable(\Sylius\Bundle\ShippingBundle\Model\ShippableInterface $shippable)
    {
        $this->__load();
        return parent::setShippable($shippable);
    }

    public function getShippingState()
    {
        $this->__load();
        return parent::getShippingState();
    }

    public function setShippingState($state)
    {
        $this->__load();
        return parent::setShippingState($state);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function getStockable()
    {
        $this->__load();
        return parent::getStockable();
    }

    public function setStockable(\Sylius\Bundle\InventoryBundle\Model\StockableInterface $stockable)
    {
        $this->__load();
        return parent::setStockable($stockable);
    }

    public function getSku()
    {
        $this->__load();
        return parent::getSku();
    }

    public function getInventoryName()
    {
        $this->__load();
        return parent::getInventoryName();
    }

    public function getInventoryState()
    {
        $this->__load();
        return parent::getInventoryState();
    }

    public function setInventoryState($state)
    {
        $this->__load();
        return parent::setInventoryState($state);
    }

    public function isSold()
    {
        $this->__load();
        return parent::isSold();
    }

    public function isBackordered()
    {
        $this->__load();
        return parent::isBackordered();
    }

    public function setCreatedAt(\DateTime $createAt)
    {
        $this->__load();
        return parent::setCreatedAt($createAt);
    }

    public function setUpdatedAt(\DateTime $updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'inventoryState', 'createdAt', 'updatedAt', 'stockable', 'shippingState', 'id', 'order', 'shipment');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}