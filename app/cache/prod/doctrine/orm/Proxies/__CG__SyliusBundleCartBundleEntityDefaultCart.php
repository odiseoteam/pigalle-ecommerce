<?php

namespace Proxies\__CG__\Sylius\Bundle\CartBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DefaultCart extends \Sylius\Bundle\CartBundle\Entity\DefaultCart implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function isLocked()
    {
        $this->__load();
        return parent::isLocked();
    }

    public function setLocked($locked)
    {
        $this->__load();
        return parent::setLocked($locked);
    }

    public function getTotalItems()
    {
        $this->__load();
        return parent::getTotalItems();
    }

    public function setTotalItems($totalItems)
    {
        $this->__load();
        return parent::setTotalItems($totalItems);
    }

    public function changeTotalItems($amount)
    {
        $this->__load();
        return parent::changeTotalItems($amount);
    }

    public function isEmpty()
    {
        $this->__load();
        return parent::isEmpty();
    }

    public function getItems()
    {
        $this->__load();
        return parent::getItems();
    }

    public function setItems(\Doctrine\Common\Collections\Collection $items)
    {
        $this->__load();
        return parent::setItems($items);
    }

    public function clearItems()
    {
        $this->__load();
        return parent::clearItems();
    }

    public function countItems()
    {
        $this->__load();
        return parent::countItems();
    }

    public function addItem(\Sylius\Bundle\CartBundle\Model\CartItemInterface $item)
    {
        $this->__load();
        return parent::addItem($item);
    }

    public function removeItem(\Sylius\Bundle\CartBundle\Model\CartItemInterface $item)
    {
        $this->__load();
        return parent::removeItem($item);
    }

    public function hasItem(\Sylius\Bundle\CartBundle\Model\CartItemInterface $item)
    {
        $this->__load();
        return parent::hasItem($item);
    }

    public function getTotal()
    {
        $this->__load();
        return parent::getTotal();
    }

    public function setTotal($total)
    {
        $this->__load();
        return parent::setTotal($total);
    }

    public function calculateTotal()
    {
        $this->__load();
        return parent::calculateTotal();
    }

    public function isExpired()
    {
        $this->__load();
        return parent::isExpired();
    }

    public function getExpiresAt()
    {
        $this->__load();
        return parent::getExpiresAt();
    }

    public function setExpiresAt(\DateTime $expiresAt = NULL)
    {
        $this->__load();
        return parent::setExpiresAt($expiresAt);
    }

    public function incrementExpiresAt()
    {
        $this->__load();
        return parent::incrementExpiresAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'locked', 'totalItems', 'total', 'expiresAt', 'id', 'items');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}