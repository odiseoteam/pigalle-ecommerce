<?php

namespace Proxies\__CG__\Gecko\NewsletterBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Newsletter extends \Gecko\NewsletterBundle\Entity\Newsletter implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getIntroText()
    {
        $this->__load();
        return parent::getIntroText();
    }

    public function setIntroText($introText)
    {
        $this->__load();
        return parent::setIntroText($introText);
    }

    public function getCoupon()
    {
        $this->__load();
        return parent::getCoupon();
    }

    public function setCoupon($coupon)
    {
        $this->__load();
        return parent::setCoupon($coupon);
    }

    public function hasFile()
    {
        $this->__load();
        return parent::hasFile();
    }

    public function getFile()
    {
        $this->__load();
        return parent::getFile();
    }

    public function setFile(\SplFileInfo $file)
    {
        $this->__load();
        return parent::setFile($file);
    }

    public function hasPath()
    {
        $this->__load();
        return parent::hasPath();
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function setPath($path)
    {
        $this->__load();
        return parent::setPath($path);
    }

    public function getTemplateName()
    {
        $this->__load();
        return parent::getTemplateName();
    }

    public function getSubscriberList()
    {
        $this->__load();
        return parent::getSubscriberList();
    }

    public function setSubscriberList($subscriberList)
    {
        $this->__load();
        return parent::setSubscriberList($subscriberList);
    }

    public function setTemplateName($templateName)
    {
        $this->__load();
        return parent::setTemplateName($templateName);
    }

    public function isSent()
    {
        $this->__load();
        return parent::isSent();
    }

    public function setSent($sent)
    {
        $this->__load();
        return parent::setSent($sent);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function incrementCreatedAt()
    {
        $this->__load();
        return parent::incrementCreatedAt();
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function incrementUpdatedAt()
    {
        $this->__load();
        return parent::incrementUpdatedAt();
    }

    public function setCreatedAt(\DateTime $createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function setUpdatedAt(\DateTime $updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'introText', 'coupon', 'path', 'templateName', 'sent', 'createdAt', 'updatedAt', 'subscriberList');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}