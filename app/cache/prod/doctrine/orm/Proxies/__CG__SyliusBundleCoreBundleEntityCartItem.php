<?php

namespace Proxies\__CG__\Sylius\Bundle\CoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CartItem extends \Sylius\Bundle\CoreBundle\Entity\CartItem implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getVariant()
    {
        $this->__load();
        return parent::getVariant();
    }

    public function setVariant(\Sylius\Bundle\AssortmentBundle\Model\Variant\VariantInterface $variant)
    {
        $this->__load();
        return parent::setVariant($variant);
    }

    public function getProductCollection()
    {
        $this->__load();
        return parent::getProductCollection();
    }

    public function setProductCollection(\Gecko\PigalleBundle\Entity\ProductCollection $productCollection)
    {
        $this->__load();
        return parent::setProductCollection($productCollection);
    }

    public function equals(\Sylius\Bundle\CartBundle\Model\CartItemInterface $item)
    {
        $this->__load();
        return parent::equals($item);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getCart()
    {
        $this->__load();
        return parent::getCart();
    }

    public function setCart(\Sylius\Bundle\CartBundle\Model\CartInterface $cart = NULL)
    {
        $this->__load();
        return parent::setCart($cart);
    }

    public function getQuantity()
    {
        $this->__load();
        return parent::getQuantity();
    }

    public function setQuantity($quantity)
    {
        $this->__load();
        return parent::setQuantity($quantity);
    }

    public function getUnitPrice()
    {
        $this->__load();
        return parent::getUnitPrice();
    }

    public function setUnitPrice($unitPrice)
    {
        $this->__load();
        return parent::setUnitPrice($unitPrice);
    }

    public function getTotal()
    {
        $this->__load();
        return parent::getTotal();
    }

    public function setTotal($total)
    {
        $this->__load();
        return parent::setTotal($total);
    }

    public function calculateTotal()
    {
        $this->__load();
        return parent::calculateTotal();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'quantity', 'unitPrice', 'total', 'cart', 'id', 'productCollection', 'variant');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}